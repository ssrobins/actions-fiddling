# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  clang_version: 12

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Install required Linux packages
      run: sudo apt-get install ninja-build python3-setuptools -y

    - name: Install CMake
      uses: ssrobins/install-cmake@main

    - name: Install Conan
      run: pip3 install conan --pre --upgrade

    - name: List bin dir
      run: ls -l /usr/bin

    - name: Build and install Include what you use
      run: |
        sudo apt-get install libclang-${{ env.clang_version }}-dev -y
        git clone https://github.com/include-what-you-use/include-what-you-use.git
        cd include-what-you-use
        git checkout clang_${{ env.clang_version }}
        cmake -G "Unix Makefiles" -DCMAKE_C_COMPILER=/usr/bin/clang-${{ env.clang_version }} -DCMAKE_CXX_COMPILER=/usr/bin/clang++-${{ env.clang_version }} -DCMAKE_PREFIX_PATH=/usr/lib/llvm-${{ env.clang_version }}/lib/cmake -B build
        cmake --build build --parallel
        sudo cmake --install build
        include-what-you-use --help

    - name: Set Android NDK
      run: echo "ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/23.2.8568313" >> $GITHUB_ENV

    - name: Use Include what you use
      run: |
        git clone https://github.com/ssrobins/stackblox
        cd stackblox
        cmake --preset androidarm64 -DCMAKE_CXX_INCLUDE_WHAT_YOU_USE="include-what-you-use" -B build_iwyu
        cmake --build build_iwyu --parallel > /tmp/iwyu.out
        cat /tmp/iwyu.out
        if grep -Fq "include-what-you-use reported diagnostics" /tmp/iwyu.out; then exit 1; fi
